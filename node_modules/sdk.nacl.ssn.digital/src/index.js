var ed2curve = require('ed2curve');
var { box, randomBytes } = require('tweetnacl');
var {
  decodeUTF8,
  encodeUTF8,
  encodeBase64,
  decodeBase64
} = require('tweetnacl-util');
var StellarSDK = require('stellar-sdk');

const newNonce = () => randomBytes(box.nonceLength);

const base64Encrypt = (secretOrSharedKey, json) => {
  const nonce = newNonce();
  const messageUint8 = decodeUTF8(JSON.stringify(json));
  const encrypted = box.after(messageUint8, nonce, secretOrSharedKey);

  const fullMessage = new Uint8Array(nonce.length + encrypted.length);
  fullMessage.set(nonce);
  fullMessage.set(encrypted, nonce.length);

  const base64FullMessage = encodeBase64(fullMessage);
  return base64FullMessage;
};

const base64Decrypt = (secretOrSharedKey, messageWithNonce) => {
  const messageWithNonceAsUint8Array = decodeBase64(messageWithNonce);
  const nonce = messageWithNonceAsUint8Array.slice(0, box.nonceLength);
  const message = messageWithNonceAsUint8Array.slice(
    box.nonceLength,
    messageWithNonce.length
  );

  const decrypted = box.open.after(message, nonce, secretOrSharedKey);

  if (!decrypted) {
    throw new Error('Could not decrypt message');
  }

  const base64DecryptedMessage = encodeUTF8(decrypted);
  return JSON.parse(base64DecryptedMessage);
};

const encrypt = (PKCashier, SKService, message) => {
  // convert EdDAS keys to curve keys
  const curvePK = ed2curve.convertPublicKey(StellarSDK.StrKey.decodeEd25519PublicKey(PKCashier));
  const curveSK = ed2curve.convertSecretKey(StellarSDK.StrKey.decodeEd25519SecretSeed(SKService));

  // share key
  // Returns a precomputed shared key
  const shared = box.before(curvePK, curveSK);

  return base64Encrypt(shared, message);

}

const decrypt = (PKService, SKCashier, EncryptMessage) => {
  // convert EdDAS keys to curve keys
  const curvePK = ed2curve.convertPublicKey(StellarSDK.StrKey.decodeEd25519PublicKey(PKService));
  const curveSK = ed2curve.convertSecretKey(StellarSDK.StrKey.decodeEd25519SecretSeed(SKCashier));

  // share key
  // Returns a precomputed shared key
  const shared = box.before(curvePK, curveSK);

  return base64Decrypt(shared, EncryptMessage);

}

module.exports = {encrypt, decrypt};
